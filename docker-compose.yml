version: "3.8"

services:
  mongo:
    image: "mongo"
    container_name: "mongo_db"
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-init-data/init-setup.sh:/docker-entrypoint-initdb.d/init-setup.sh
      - ./mongo-init-data/mongorestore.sh:/docker-entrypoint-initdb.d/mongorestore.sh
      - "./mongo-init-data/teams_api:/home/init-data/"
    command: ["--replSet", "rs0", "--bind_ip_all"]

  # NOT SURE YET IF I NEED THIS
  # redis:
  #   image: redis:alpine
  #   restart: always

  # rabbitmq:
  #   image: rabbitmq:3-management-alpine
  #   container_name: "rabbitmq"
  #   ports:
  #     - 5672:5672
  #     - 15672:15672
  #   volumes:
  #     - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
  #     - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  # PATTERN TO BUILD A CONTAINER FOR THE API
  api:
    container_name: api
    build:
      context: ./udance_api
      target: development
    command: npm run start:dev
    volumes:
      - ./udance_api:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3005:3005
    env_file:
      - ./udance_api/.env
    # depends_on:
    #   - redis
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost/udance-api || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  # chat_api:
  #   container_name: chat-api
  #   build:
  #     context: ./nlite_chat_api
  #     target: development
  #   command: yarn run start:dev
  #   volumes:
  #     - ./nlite_chat_api:/usr/src/app
  #     - /usr/src/app/node_modules
  #   ports:
  #     - 3008:3008
  #   env_file:
  #     - ./nlite_chat_api/.env
  #   depends_on:
  #     - redis
  #   healthcheck:
  #     test: wget --no-verbose --tries=1 --spider http://localhost/chat-api || exit 1
  #     interval: 60s
  #     retries: 5
  #     start_period: 20s
  #     timeout: 10s

  # ALSO PATTERN FOR WEBSITE CONTAINER
  website:
    build:
      context: ./main_website
      dockerfile: Dockerfile
    restart: always
    container_name: website
    environment:
      BASE_PATH: /udance
    stdin_open: true
    volumes:
      - ./main_website:/usr/src/app/website
      - /usr/src/app/website/node_modules
    healthcheck:
      test: curl --fail http://localhost || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  # PATTERN FOR BUILDING A CONTAINER FOR MAIN APP
  app:
    container_name: app
    build:
      context: ./app
    restart: on-failure
    working_dir: /home/node/app/
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: bash -c "npm run start:dev"
    volumes:
      - /home/node/app/node_modules
      - ./app:/home/node/app
    healthcheck:
      test: curl --fail http://localhost/app || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  # PATTERN FOR BUILDING A CONTAINER FOR NGINX - not sure if I need this
  nginx:
    container_name: nginx
    restart: always
    depends_on:
      - app
      - website
      - udance_api
    build:
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    environment:
      - NGINX_SERVER_NAME=localhost
      - CERT_LOCATION=/etc/nginx/certs/localhost.crt
      - KEY_LOCATION=/etc/nginx/certs/localhost.key
    volumes:
      - ./nginx/configs/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/local/localhost.crt:/etc/nginx/certs/localhost.crt
      - ./nginx/local/localhost.key:/etc/nginx/certs/localhost.key
    healthcheck:
      test: service nginx status || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

volumes:
  mongodb:
    external: true
